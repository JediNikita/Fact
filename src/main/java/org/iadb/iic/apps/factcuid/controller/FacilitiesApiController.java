package org.iadb.iic.apps.factcuid.controller;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.iadb.iic.apps.factcuid.model.RiskFacility;
import org.iadb.iic.apps.factcuid.service.FacilityApiService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.ApiParam;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-17T05:30:30.601Z")

@Controller
public class FacilitiesApiController implements FacilitiesApi {

    private static final Logger log = LoggerFactory.getLogger(FacilitiesApiController.class);
    private final ObjectMapper objectMapper;
    private final HttpServletRequest request;

    @Autowired
    private FacilityApiService fas;
    
    @org.springframework.beans.factory.annotation.Autowired
    public FacilitiesApiController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    @Override
	public ResponseEntity<RiskFacility> findFacilityRatingByIdAndPeriod(@ApiParam(value = "FacilityId",required=true) @PathVariable("facilityId") String facilityId,@NotNull @ApiParam(value = "Effective period in yyyymm format", required = true) @Valid @RequestParam(value = "periodo", required = true) String periodo) {
        String accept = request.getHeader("Accept");
        RiskFacility facility= fas.findFacilityRatingByIdAndPeriod(facilityId, periodo);
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<RiskFacility>(objectMapper.readValue("{  \"expectedLossDefault\" : 6.02745618307040320615897144307382404804229736328125,  \"finalRating\" : \"A\",  \"ratingDate\" : \"2000-01-23\",  \"id\" : 0,  \"yyyymm\" : \"yyyymm\",  \"expectedLossGrade\" : 1.46581298050294517310021547018550336360931396484375}", RiskFacility.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<RiskFacility>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<RiskFacility>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Override
	public ResponseEntity<List<RiskFacility>> findFacilityRatingsByPeriod(@NotNull @ApiParam(value = "Effective period in yyyymm format", required = true) @Valid @RequestParam(value = "periodo", required = true) String periodo) {
        String accept = request.getHeader("Accept");
        List<RiskFacility> facilityList= fas.findFacilityRatingPeriod(periodo);
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<List<RiskFacility>>(objectMapper.readValue("[ {  \"expectedLossDefault\" : 6.02745618307040320615897144307382404804229736328125,  \"finalRating\" : \"A\",  \"ratingDate\" : \"2000-01-23\",  \"id\" : 0,  \"yyyymm\" : \"yyyymm\",  \"expectedLossGrade\" : 1.46581298050294517310021547018550336360931396484375}, {  \"expectedLossDefault\" : 6.02745618307040320615897144307382404804229736328125,  \"finalRating\" : \"A\",  \"ratingDate\" : \"2000-01-23\",  \"id\" : 0,  \"yyyymm\" : \"yyyymm\",  \"expectedLossGrade\" : 1.46581298050294517310021547018550336360931396484375} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<List<RiskFacility>>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<List<RiskFacility>>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Override
	public ResponseEntity<List<RiskFacility>> getFacilityRatings() {
        String accept = request.getHeader("Accept");
        List<RiskFacility> facilityList= fas.findFacilityRatings();
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<List<RiskFacility>>(objectMapper.readValue("[ {  \"expectedLossDefault\" : 6.02745618307040320615897144307382404804229736328125,  \"finalRating\" : \"A\",  \"ratingDate\" : \"2000-01-23\",  \"id\" : 0,  \"yyyymm\" : \"yyyymm\",  \"expectedLossGrade\" : 1.46581298050294517310021547018550336360931396484375}, {  \"expectedLossDefault\" : 6.02745618307040320615897144307382404804229736328125,  \"finalRating\" : \"A\",  \"ratingDate\" : \"2000-01-23\",  \"id\" : 0,  \"yyyymm\" : \"yyyymm\",  \"expectedLossGrade\" : 1.46581298050294517310021547018550336360931396484375} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<List<RiskFacility>>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<List<RiskFacility>>(HttpStatus.NOT_IMPLEMENTED);
    }

}